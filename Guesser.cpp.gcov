        -:    0:Source:Guesser.cpp
        -:    0:Graph:Guesser.gcno
        -:    0:Data:Guesser.gcda
        -:    0:Runs:1
        -:    1:#include "Guesser.h"
        -:    2:#include <string>
        -:    3:#include <algorithm>
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:/*
        -:    8:  Returns an whole number representing the distance between the guess,
        -:    9:  provided as an argument, and the secret. The distance represents the number
        -:   10:  of characters that would have to be changed at the same location to match
        -:   11:  the other string. When the two strings are identical, the distance is 0,
        -:   12:  but for each letter different, the distance increases by 1. When the
        -:   13:  strings are different lengths, each of the extra characters in the longer
        -:   14:  string also counts as an increase in 1 to the distance, up to the length of
        -:   15:  the secret; in other words, if m_secret has a 10 characters and the guess
        -:   16:  has 100, the distance is 10.
        -:   17:*/
function _ZN7Guesser8distanceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7:   18:unsigned int Guesser::distance(string guess)
        -:   19:{
        7:   20:  size_t secret_length = m_secret.length();
call    0 returned 7
        7:   21:  size_t guess_length = guess.length();
call    0 returned 7
        7:   22:  size_t min_length = std::min(secret_length, guess_length);
call    0 returned 7
        7:   23:  unsigned int distance = 0;
        -:   24:
       35:   25:  for (size_t i = 0; i < min_length; i++)
branch  0 taken 28
branch  1 taken 7 (fallthrough)
        -:   26:  {
       28:   27:    if (m_secret[i] != guess[i])
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 28
branch  4 taken 28 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 13 (fallthrough)
branch  7 taken 15
        -:   28:    {
       13:   29:      distance++;
        -:   30:    }
        -:   31:  }
        -:   32:
        7:   33:  distance += (secret_length > guess_length) ? (secret_length - guess_length) : (guess_length - secret_length);
branch  0 taken 4 (fallthrough)
branch  1 taken 3
        -:   34:
        7:   35:  return distance;
        -:   36:}
        -:   37:
        -:   38:/*
        -:   39:  Constructor requires that the secret phrase is provided its value as
        -:   40:  an argument. This secret will not change for the lifespan of an instance
        -:   41:  of any Guesser object and must have a length of 32 characters or less,
        -:   42:  otherwise, it will be truncated at that length.
        -:   43:*/
function _ZN7GuesserC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 86%
        6:   44:Guesser::Guesser(string secret)
call    0 returned 6
        -:   45:{
        6:   46:  m_secret = secret.substr(0, 32);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 6
call    4 returned 6
        6:   47:  m_remaining = 3;
        6:   48:}
call    0 never executed
        -:   49:
        -:   50:/*
        -:   51:  Determines and returns whether the provided guess matches the secret
        -:   52:  phrase. However, the function also returns false if the secret is locked,
        -:   53:  which happens if either (or both):
        -:   54:    (A) there are no remaining guesses allowed
        -:   55:    (B) the function detects brute force, as indicated by a guess that has a
        -:   56:        distance greater than 2 from the secret
        -:   57:  See the remaining() and distance() functions for specifications regarding
        -:   58:  determining how many guesses are remaining and the distance between a guess
        -:   59:  and the secret.
        -:   60:*/
function _ZN7Guesser5matchENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 80%
        7:   61:bool Guesser::match(string guess)
        -:   62:{
        7:   63:  if (m_remaining == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -:   64:  {
    #####:   65:    return false;
        -:   66:  }
        7:   67:  else if (distance(guess) > 2)
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 7
branch  5 taken 4 (fallthrough)
branch  6 taken 3
call    7 never executed
        -:   68:  {
        4:   69:    return false;
        -:   70:  }
        3:   71:  if (guess == m_secret)
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        -:   72:  {
        2:   73:    m_remaining = 3;
        2:   74:    return true;
        -:   75:  }
        -:   76:  else
        -:   77:  {
        1:   78:    m_remaining--;
        1:   79:    return false;
        -:   80:  }
        -:   81:  return false;
        -:   82:}
        -:   83:
        -:   84:/*
        -:   85:  Returns the number of guesses remaining. A Guesser object allows up to
        -:   86:  three (3) consecutive guesses without a match. If three guesses are made
        -:   87:  without any being a true match, the secret is locked. However, whenever
        -:   88:  an unlocked secret is guessed with a true match, the guesses remaining
        -:   89:  reset to three (3).
        -:   90:*/
function _ZN7Guesser9remainingEv called 2 returned 100% blocks executed 100%
        2:   91:unsigned int Guesser::remaining()
        -:   92:{
        2:   93:  return m_remaining;
        -:   94:}
